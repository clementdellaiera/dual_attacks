

# This file was *autogenerated* from the file test_fpylll_g6k.sage
from sage.all_cmdline import *   # import sage library

_sage_const_30 = Integer(30); _sage_const_2 = Integer(2); _sage_const_8 = Integer(8); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_p95 = RealNumber('.95'); _sage_const_1p7 = RealNumber('1.7'); _sage_const_5 = Integer(5); _sage_const_p5 = RealNumber('.5'); _sage_const_2p = RealNumber('2.')

# Packages

from math import sqrt
from fpylll import IntegerMatrix
from fpylll.util import gaussian_heuristic
from g6k import Siever

# Parameters

# Set up the instance

n = _sage_const_30 
A = IntegerMatrix.random(n, "qary", k=n/_sage_const_2 , bits=_sage_const_8 )
g6k = Siever(A)
g6k.lll(_sage_const_0 , n)

g6k.initialize_local(_sage_const_0 , n/_sage_const_2 , n)
while g6k.l > _sage_const_0 :
    # Extend the lift context to the left
    g6k.extend_left(_sage_const_1 )
    # Sieve
    g6k()

with g6k.temp_params(saturation_ratio=_sage_const_p95 , saturation_radius=_sage_const_1p7 , 
                     db_size_base=sqrt(_sage_const_1p7 ), db_size_factor=_sage_const_5 ):
    g6k()

# Convert all db vectors from basis A to cannonical basis and print them 
# out if they are indeed shorter than 1.7 * gh^2

gh = gaussian_heuristic([g6k.M.get_r(i, i) for i in range(n)])

db = list(g6k.itervalues())
found = _sage_const_0 

for x in db:
    v = A.multiply_left(x)
    l = sum(v_**_sage_const_2  for v_ in v)
    if l < _sage_const_1p7  * gh:
        print(l/gh, v)
        found += _sage_const_1 

print("found %d vectors of squared length than 1.7*gh. (expected %f)"%(found, _sage_const_p5  * _sage_const_1p7 **(n/_sage_const_2p )))

